.\"
.\" Copyright 2013 Samy Al Bahra.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd April 11, 2013
.Dt ck_pr_cas 3
.Sh NAME
.Nm ck_pr_cas_ptr ,
.Nm ck_pr_cas_ptr_value ,
.Nm ck_pr_cas_ptr_2 ,
.Nm ck_pr_cas_ptr_2_value ,
.Nm ck_pr_cas_double ,
.Nm ck_pr_cas_double_value ,
.Nm ck_pr_cas_char ,
.Nm ck_pr_cas_char_value ,
.Nm ck_pr_cas_uint ,
.Nm ck_pr_cas_uint_value ,
.Nm ck_pr_cas_int ,
.Nm ck_pr_cas_int_value ,
.Nm ck_pr_cas_64_2 ,
.Nm ck_pr_cas_64_2_value ,
.Nm ck_pr_cas_64 ,
.Nm ck_pr_cas_64_value ,
.Nm ck_pr_cas_32 ,
.Nm ck_pr_cas_32_value ,
.Nm ck_pr_cas_16 ,
.Nm ck_pr_cas_16_value ,
.Nm ck_pr_cas_8 ,
.Nm ck_pr_cas_8_value
.Nd atomic compare-and-swap operations
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_pr.h
.Ft bool
.Fn ck_pr_cas_ptr "void *target" "void *old_value" "void *new_value"
.Ft bool
.Fn ck_pr_cas_ptr_value "void *target" "void *old_value" "void *new_value" "void *original_value"
.Ft bool
.Fn ck_pr_cas_ptr_2 "void *target" "void *old_value" "void *new_value"
.Ft bool
.Fn ck_pr_cas_ptr_2_value "void *target" "void *old_value" "void *new_value" "void *original_value"
.Ft bool
.Fn ck_pr_cas_double "double *target" "double old_value" "double new_value"
.Ft bool
.Fn ck_pr_cas_double_value "double *target" "double old_value" "double new_value" "double *original_value"
.Ft bool
.Fn ck_pr_cas_char "char *target" "char old_value" "char new_value"
.Ft bool
.Fn ck_pr_cas_char_value "char *target" "char old_value" "char new_value" "char *original_value"
.Ft bool
.Fn ck_pr_cas_uint "unsigned int *target" "unsigned int old_value" "unsigned int new_value"
.Ft bool
.Fn ck_pr_cas_uint_value "unsigned int *target" "unsigned int old_value" "unsigned int new_value" "unsigned int *original_value"
.Ft bool
.Fn ck_pr_cas_int "int *target" "int old_value" "int new_value"
.Ft bool
.Fn ck_pr_cas_int_value "int *target" "int old_value" "int new_value" "int *original_value"
.Ft bool
.Fn ck_pr_cas_64_2 "uint64_t target[static 2]" "uint64_t old_value[static 2]" "uint64_t new_value[static 2]"
.Ft bool
.Fn ck_pr_cas_64_2_value "uint64_t target[static 2]" "uint64_t old_value[static 2]" "uint64_t new_value[static 2]" "uint64_t original_value[static 2]"
.Ft bool
.Fn ck_pr_cas_64 "uint64_t *target" "uint64_t old_value" "uint64_t new_value"
.Ft bool
.Fn ck_pr_cas_64_value "uint64_t *target" "uint64_t old_value" "uint64_t new_value" "uint64_t *original_value"
.Ft bool
.Fn ck_pr_cas_32 "uint32_t *target" "uint32_t old_value" "uint32_t new_value"
.Ft bool
.Fn ck_pr_cas_32_value "uint32_t *target" "uint32_t old_value" "uint32_t new_value" "uint32_t *original_value"
.Ft bool
.Fn ck_pr_cas_16 "uint16_t *target" "uint16_t old_value" "uint16_t new_value"
.Ft bool
.Fn ck_pr_cas_16_value "uint16_t *target" "uint16_t old_value" "uint16_t new_value" "uint16_t *original_value"
.Ft bool
.Fn ck_pr_cas_8 "uint8_t *target" "uint8_t old_value" "uint8_t new_value"
.Ft bool
.Fn ck_pr_cas_8_value "uint8_t *target" "uint8_t old_value" "uint8_t new_value" "uint8_t *original_value"
.Sh DESCRIPTION
The
.Fn ck_pr_cas 3
family of functions atomically compare the value in
.Fa target
for equality with
.Fa old_value
and if so, replace the value pointed to by
.Fa target
with the value specified by
.Fa original_value .
If the value in
.Fa target
was not equal to the value specified by
.Fa old_value
then no modifications occur to the value in
.Fa target .
The *_value form of these functions unconditionally update
.Fa original_value .
.Sh RETURN VALUES
This family of functions return true if the value in
.Fa target
was modified as a result of the operation. Otherwise, they
return false.
.Sh SEE ALSO
.Xr ck_pr_fence_load 3 ,
.Xr ck_pr_fence_load_depends 3 ,
.Xr ck_pr_fence_store 3 ,
.Xr ck_pr_fence_memory 3 ,
.Xr ck_pr_load 3 ,
.Xr ck_pr_store 3 ,
.Xr ck_pr_fas 3 ,
.Xr ck_pr_faa 3 ,
.Xr ck_pr_inc 3 ,
.Xr ck_pr_dec 3 ,
.Xr ck_pr_neg 3 ,
.Xr ck_pr_not 3 ,
.Xr ck_pr_sub 3 ,
.Xr ck_pr_and 3 ,
.Xr ck_pr_or 3 ,
.Xr ck_pr_xor 3 ,
.Xr ck_pr_add 3 ,
.Xr ck_pr_btc 3 ,
.Xr ck_pr_bts 3 ,
.Xr ck_pr_btr 3
.Pp
Additional information available at http://concurrencykit.org/
