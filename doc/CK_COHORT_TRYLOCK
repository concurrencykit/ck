.\"
.\" Copyright 2013 Brendon Scheinman.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd March 9, 2013.
.Dt CK_COHORT_TRYLOCK 3
.Sh NAME
.Nm CK_COHORT_TRYLOCK
.Nd try to acquire cohort lock
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_cohort.h
.Fn CK_COHORT_TRYLOCK "COHORT_NAME cohort_name" "COHORT *cohort" "void *global_trylock_context" \
"void *local_trylock_context" "void *lock_unlock_context"
.Sh DESCRIPTION
This call attempts to acquire both the local and global (if necessary) locks from
.Fa cohort .
It can only be used with cohort types that were defined using the
.Xr CK_COHORT_TRYLOCK_PROTOTYPE 3
macro.  The call will not block and will return a bool that will evaluate to true iff
the cohort was successfully acquired.
.Fa global_trylock_context
will be passed as the second argument to the function that was provided as the
.Fa global_trylock_method
argument to CK_COHORT_TRYLOCK_PROTOTYPE if that method is called, and
.Fa local_trylock_context
will be passed to the function specified by
.Fa local_trylock_method .
If the global lock acquisition fails, then the cohort will immediately release its
local lock as well, and
.Fa local_unlock_context
will be passed to the function specified by
.Fa local_unlock_method
when this call is made.
.Sh SEE ALSO
.Xr ck_cohort 3 ,
.Xr CK_COHORT_PROTOTYPE 3 ,
.Xr CK_COHORT_TRYLOCK_PROTOTYPE 3 ,
.Xr CK_COHORT_INSTANCE 3 ,
.Xr CK_COHORT_INITIALIZER 3 ,
.Xr CK_COHORT_INIT 3 ,
.Xr CK_COHORT_LOCK 3 ,
.Xr CK_COHORT_UNLOCK 3 ,
.Xr CK_COHORT_LOCKED 3 ,
.Pp
Additional information available at http://concurrencykit.org/
