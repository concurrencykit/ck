.\"
.\" Copyright 2012-2013 Samy Al Bahra.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd April 20, 2013
.Dt CK_RING_ENQUEUE_SPSC 3
.Sh NAME
.Nm ck_ring_enqueue_spsc
.Nd enqueue pointer into bounded FIFO
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_ring.h
.Ft bool
.Fn ck_ring_enqueue_spsc "ck_ring_t *ring" "ck_ring_buffer_t *buffer" "void *entry"
.Sh DESCRIPTION
The
.Fn ck_ring_enqueue_spsc 3
function enqueues the pointer
.Fa entry
into the bounded buffer pointed to by
.Fa ring
in FIFO fashion.
The buffer pointed to by
.Fa buffer
must be unique to
.Fa ring
and point to an array of ck_ring_buffer_t of sufficient
length (according to the power-of-2 elements in the buffer).
The decoupling of the ring from the buffer serves
to address use-cases involving multiple address spaces
and DMA, among others.
If you are on non-POSIX platforms or wish for strict
compliance with C, then it is recommended to pass a
pointer of type void ** for
.Fa entry .
This function is safe to call without locking for up to
one concurrent invocation of
.Fn ck_ring_dequeue_spsc 3 .
This function provides wait-free progress
guarantees.
.Sh EXAMPLE
.Bd -literal -offset indent
#include <ck_ring.h>

/* This ring was previously initialized with ck_ring_init. */
ck_ring_t ring;

/* The ring was initialized for 1023 elements. */
ck_ring_buffer_t buffer[1024];

void
enqueue(void)
{
	void *entry = some_object;

	/* Attempt to enqueue pointer to some_object into buffer. */
	if (ck_ring_enqueue_spsc(&ring, &buffer, &entry) == false) {
		/*
		 * The buffer was full and the enqueue operation
		 * has failed.
		 */
		return;
	}

	/* Enqueue operation completed successfully. */
	return;
}
.Ed
.Sh RETURN VALUES
The function returns true if the value of
.Fa entry
was successfully enqueued into
.Fa ring .
The function will return false if the value of
.Fa entry
could not be enqueued which only occurs if
.Fa ring
was full.
.Sh SEE ALSO
.Xr ck_ring_init 3 ,
.Xr ck_ring_dequeue_spmc 3 ,
.Xr ck_ring_trydequeue_spmc 3 ,
.Xr ck_ring_enqueue_spmc 3 ,
.Xr ck_ring_enqueue_spmc_size 3 ,
.Xr ck_ring_dequeue_spsc 3 ,
.Xr ck_ring_enqueue_spsc_size 3 ,
.Xr ck_ring_capacity 3 ,
.Xr ck_ring_size 3
.Pp
Additional information available at http://concurrencykit.org/
